package org.example.petcarebe.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.example.petcarebe.dto.ProductsDTO;
import org.example.petcarebe.model.ProductDetails;
import org.example.petcarebe.repository.OrderDetailsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.*;

@Service
public class AiService {

    @Value("${gemini.api.key}") // üîπ L·∫•y API key t·ª´ file c·∫•u h√¨nh (application.properties)
    private String geminiApiKey;

    private static final String GEMINI_API_URL_TEMPLATE =
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=%s";

    @Autowired
    private ProductsService productsService;

    @Autowired
    private OrderDetailsRepository orderDetailsRepository;

    private final ObjectMapper objectMapper = new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT);

    public String getAiResponse(String userMessage) {
        Map<String, Object> data = new HashMap<>();

        // üîπ X√°c ƒë·ªãnh nhu c·∫ßu c·ªßa ng∆∞·ªùi d√πng
        if (containsBestSellingQuery(userMessage)) {
            data.put("bestSellingProducts", getBestSellingProducts());
        } else if (containsAllProductsQuery(userMessage)) {
            data.put("allProducts", productsService.getAllProductss());
        } else if (containsProductDetailQuery(userMessage)) {
            data.put("productDetails", getProductDetails(userMessage));
        } else if (containsGeneralInfoQuery(userMessage)) {
            data.put("storeInfo", getStoreInformation());
        } else {
            data.put("allProducts", productsService.getAllProductss()); // Tr∆∞·ªùng h·ª£p m·∫∑c ƒë·ªãnh
        }

        // üîπ G·ª≠i request v√† nh·∫≠n ph·∫£n h·ªìi t·ª´ AI
        String aiResponse = sendRequestToAI(userMessage, data);
        return formatAiResponse(aiResponse);
    }

    // üõí X√°c ƒë·ªãnh c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m b√°n ch·∫°y
    private boolean containsBestSellingQuery(String userMessage) {
        String lowerCaseMessage = userMessage.toLowerCase();
        return lowerCaseMessage.contains("b√°n ch·∫°y nh·∫•t") || lowerCaseMessage.contains("ph·ªï bi·∫øn nh·∫•t");
    }

    // üõçÔ∏è X√°c ƒë·ªãnh c√¢u h·ªèi v·ªÅ danh s√°ch s·∫£n ph·∫©m
    private boolean containsAllProductsQuery(String userMessage) {
        String lowerCaseMessage = userMessage.toLowerCase();
        return lowerCaseMessage.contains("t·∫•t c·∫£ s·∫£n ph·∫©m") || lowerCaseMessage.contains("danh s√°ch s·∫£n ph·∫©m");
    }

    // üì¶ X√°c ƒë·ªãnh c√¢u h·ªèi v·ªÅ th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m
    private boolean containsProductDetailQuery(String userMessage) {
        String lowerCaseMessage = userMessage.toLowerCase();
        return lowerCaseMessage.contains("th√¥ng tin s·∫£n ph·∫©m") || lowerCaseMessage.contains("gi√°") || lowerCaseMessage.contains("chi ti·∫øt");
    }

    // üè™ X√°c ƒë·ªãnh c√¢u h·ªèi v·ªÅ th√¥ng tin c·ª≠a h√†ng
    private boolean containsGeneralInfoQuery(String userMessage) {
        String lowerCaseMessage = userMessage.toLowerCase();
        return lowerCaseMessage.contains("gi·ªù m·ªü c·ª≠a") ||
                lowerCaseMessage.contains("ch√≠nh s√°ch") ||
                lowerCaseMessage.contains("ƒë·ªïi tr·∫£") ||
                lowerCaseMessage.contains("li√™n h·ªá") ||
                lowerCaseMessage.contains("s·ªë ƒëi·ªán tho·∫°i") ||
                lowerCaseMessage.contains("email");
    }

    // üìä L·∫•y danh s√°ch s·∫£n ph·∫©m b√°n ch·∫°y
    private List<Map<String, Object>> getBestSellingProducts() {
        Pageable top3 = PageRequest.of(0, 3);
        List<Object[]> bestSellingProducts = orderDetailsRepository.findBestSellingProducts(top3);

        List<Map<String, Object>> bestSellersList = new ArrayList<>();
        for (Object[] result : bestSellingProducts) {
            ProductDetails product = (ProductDetails) result[0];
            Long totalSold = (Long) result[1];

            bestSellersList.add(Map.of(
                    "name", product.getProducts().getProductName(),
                    "totalSold", totalSold,
                    "price", product.getPrice(),
                    "description", product.getProducts().getDescription()
            ));
        }
        return bestSellersList;
    }

    // üîé L·∫•y th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m theo t√™n s·∫£n ph·∫©m trong c√¢u h·ªèi
    private Map<String, Object> getProductDetails(String userMessage) {
        List<ProductsDTO> allProducts = productsService.getAllProductss();
        String userMessageLower = userMessage.toLowerCase();

        for (ProductsDTO product : allProducts) {
            String productNameLower = product.getProductName().toLowerCase();

            if (userMessageLower.contains(productNameLower)) {
                return Map.of(
                        "name", product.getProductName(),
                        "price", product.getPrice(),
                        "description", product.getDescription()
                );
            }
        }

        return Map.of("error", "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m b·∫°n y√™u c·∫ßu.");
    }

    // üè™ L·∫•y th√¥ng tin c·ª≠a h√†ng
    private Map<String, Object> getStoreInformation() {
        return Map.of(
                "storeName", "PetCare Shop",
                "openingHours", "8:00 AM - 21:00 PM",
                "returnPolicy", "ƒê·ªïi tr·∫£ trong 7 ng√†y n·∫øu c√≥ l·ªói t·ª´ nh√† s·∫£n xu·∫•t.",
                "contact", Map.of(
                        "phone", "0862287480",
                        "contactPerson", "Ph√°t",
                        "email", "vothanhphat7480@gmail.com"
                )
        );
    }

    // üöÄ G·ª≠i y√™u c·∫ßu ƒë·∫øn API Gemini
    private String sendRequestToAI(String userMessage, Map<String, Object> data) {
        try {
            String productsJson = objectMapper.writeValueAsString(data);
            String prompt = "B·∫°n l√† nh√¢n vi√™n t∆∞ v·∫•n c·ªßa PetCare. ƒê√¢y l√† th√¥ng tin c·ª≠a h√†ng:\n\n"
                    + productsJson + "\n\nNg∆∞·ªùi d√πng h·ªèi: " + userMessage
                    + "\n H√£y tr·∫£ l·ªùi chi ti·∫øt, r√µ r√†ng v√† d·ªÖ ƒë·ªçc."
                    + " N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ li√™n h·ªá, h√£y cung c·∫•p s·ªë ƒëi·ªán tho·∫°i v√† email."
                    + " N·∫øu h·ªèi v·ªÅ gi·ªù m·ªü c·ª≠a, h√£y cung c·∫•p th√¥ng tin gi·ªù ho·∫°t ƒë·ªông.";

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            Map<String, Object> requestBody = Map.of("contents", new Object[]{
                    Map.of("parts", new Object[]{Map.of("text", prompt)})
            });

            HttpEntity<String> entity = new HttpEntity<>(objectMapper.writeValueAsString(requestBody), headers);
            RestTemplate restTemplate = new RestTemplate();
            String apiUrl = String.format(GEMINI_API_URL_TEMPLATE, geminiApiKey);

            ResponseEntity<String> response = restTemplate.postForEntity(apiUrl, entity, String.class);
            return response.getBody();
        } catch (Exception e) {
            return "{ \"error\": \"L·ªói khi g·ª≠i y√™u c·∫ßu ƒë·∫øn AI!\" }";
        }
    }

    // üõ†Ô∏è X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ AI
    private String formatAiResponse(String aiResponse) {
        try {
            JsonNode root = objectMapper.readTree(aiResponse);
            JsonNode candidates = root.path("candidates");

            if (!candidates.isArray() || candidates.isEmpty()) {
                return "{ \"error\": \"Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ AI.\" }";
            }

            JsonNode contentParts = candidates.get(0).path("content").path("parts");
            if (!contentParts.isArray() || contentParts.isEmpty()) {
                return "{ \"error\": \"Kh√¥ng t√¨m th·∫•y n·ªôi dung ph·∫£n h·ªìi.\" }";
            }

            return objectMapper.writeValueAsString(Map.of(
                    "status", "success",
                    "message", "Ph·∫£n h·ªìi t·ª´ AI",
                    "response", contentParts.get(0).path("text").asText(),
                    "timestamp", new Date().toString()
            ));
        } catch (Exception e) {
            return "{ \"error\": \"L·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ AI!\" }";
        }
    }
}
